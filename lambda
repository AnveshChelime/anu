import boto3
import requests
import os
import json

# AWS Clients
ec2_client = boto3.client("ec2")
ssm_client = boto3.client("ssm")
secrets_client = boto3.client("secretsmanager")

# Retrieve Terraform API Token from AWS Secrets Manager
def get_tfc_api_token():
    secret_name = os.environ["TFC_API_TOKEN"]
    client = boto3.client("secretsmanager")

    try:
        response = client.get_secret_value(SecretId=secret_name)
        secret_value = response["SecretString"]
        return json.loads(secret_value).get("token", secret_value)  # If JSON, extract "token" key
    except Exception as e:
        print(f"‚ùå Error retrieving Terraform API token: {e}")
        return None

# Get latest AMI from SSM Parameter Store
def get_latest_ami():
    try:
        response = ssm_client.get_parameter(Name=os.environ["AMI_PARAMETER_NAME"])
        return response["Parameter"]["Value"]
    except Exception as e:
        print(f"‚ùå Error fetching AMI from SSM: {e}")
        return None

# Get EC2 instances running OLD AMI and extract workspace_id
def get_workspace_ids(old_ami):
    workspace_ids = {}
    try:
        instances = ec2_client.describe_instances(
            Filters=[{"Name": "image-id", "Values": [old_ami]}]
        )

        for reservation in instances["Reservations"]:
            for instance in reservation["Instances"]:
                instance_id = instance["InstanceId"]
                workspace_id = None
                
                for tag in instance.get("Tags", []):
                    if tag["Key"] == "tfc_wsid":
                        workspace_id = tag["Value"]

                if workspace_id:
                    workspace_ids[instance_id] = workspace_id
                else:
                    print(f"‚ö†Ô∏è Skipping {instance_id}: No workspace ID found.")

    except Exception as e:
        print(f"‚ùå Error fetching EC2 instances: {e}")

    print(f"üîπ Found Workspace IDs: {workspace_ids}")
    return workspace_ids

# Get list of workspaces from Terraform Cloud
def get_tf_workspaces(api_token, org_name):
    headers = {
        "Authorization": f"Bearer {api_token.strip()}",
        "Content-Type": "application/vnd.api+json",
    }
    try:
        response = requests.get(
            f"https://app.terraform.io/api/v2/organizations/{org_name}/workspaces",
            headers=headers,
        )
        response_json = response.json()
        
        if "data" not in response_json:
            print("‚ö†Ô∏è API Response does not contain 'data' key!")
            return {}

        return {ws["id"]: ws["attributes"]["name"] for ws in response_json["data"]}

    except Exception as e:
        print(f"‚ùå Error fetching Terraform workspaces: {e}")
        return {}

# Find matching Terraform workspaces with Account Validation
def find_matching_workspaces(api_token, org_name, workspace_ids, aws_account_id):
    workspaces = get_tf_workspaces(api_token, org_name)
    matched_workspaces = {}

    for instance_id, ws_id in workspace_ids.items():
        if ws_id in workspaces:
            matched_workspaces[instance_id] = ws_id
        else:
            print(f"üö® Security Check Failed: Workspace {ws_id} does not match AWS account {aws_account_id}, skipping.")

    print(f"üîπ Matched Workspaces (Valid): {matched_workspaces}")
    return matched_workspaces

# Trigger Terraform Cloud Run
def trigger_tf_run(api_token, workspace_id):
    headers = {
        "Authorization": f"Bearer {api_token.strip()}",
        "Content-Type": "application/vnd.api+json",
    }
    payload = {
        "data": {
            "attributes": {
                "message": "AMI update - Triggering ASG refresh",
                "is-destroy": False
            },
            "relationships": {
                "workspace": {
                    "data": {
                        "type": "workspaces",
                        "id": workspace_id
                    }
                }
            }
        }
    }
    
    try:
        response = requests.post(
            "https://app.terraform.io/api/v2/runs",
            headers=headers,
            json=payload,
        )
        print(f"‚úÖ Triggered Terraform Run for {workspace_id}: {response.status_code}")

    except Exception as e:
        print(f"‚ùå Error triggering Terraform Run for {workspace_id}: {e}")

# Lambda Handler Function
def lambda_handler(event, context):
    # Retrieve API token from Secrets Manager
    api_token = get_tfc_api_token()
    if not api_token:
        print("‚ùå Error: Failed to retrieve Terraform API token.")
        return {"statusCode": 500, "body": "Terraform API token retrieval failed"}

    org_name = os.environ.get("TFC_ORG_NAME")
    aws_account_id = boto3.client("sts").get_caller_identity()["Account"]

    # Debugging: Print Retrieved API Token and Org Name
    print(f"üîπ API Token Retrieved: {'Yes' if api_token else 'No'}")
    print(f"üîπ Organization Name: {org_name}")
    print(f"üîπ AWS Account ID: {aws_account_id}")

    if not org_name:
        print("‚ùå Error: Organization name is missing.")
        return {"statusCode": 500, "body": "Organization name retrieval failed"}

    # Get Old AMI from parameter store
    latest_ami = get_latest_ami()
    if not latest_ami:
        return {"statusCode": 500, "body": "Failed to fetch AMI from SSM"}

    # Find workspace IDs based on EC2 instances
    workspace_ids = get_workspace_ids(latest_ami)
    if not workspace_ids:
        print("‚ö†Ô∏è No matching EC2 instances found for the old AMI.")
        return {"statusCode": 200, "body": "No matching EC2 instances"}

    # Find matching Terraform Cloud Workspaces with security validation
    matching_workspaces = find_matching_workspaces(api_token, org_name, workspace_ids, aws_account_id)
    if not matching_workspaces:
        print("‚ö†Ô∏è No matching Terraform Cloud Workspaces found.")
        return {"statusCode": 200, "body": "No matching Terraform Cloud Workspaces"}

    # Trigger Terraform runs for each matching workspace
    for instance_id, ws_id in matching_workspaces.items():
        print(f"üöÄ Triggering Terraform Run for EC2: {instance_id} with Workspace: {ws_id}")
        trigger_tf_run(api_token, ws_id)

    return {"statusCode": 200, "body": "Terraform runs triggered successfully."}
