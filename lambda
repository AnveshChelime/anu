import boto3
import os
import json

# AWS Clients
ec2 = boto3.client('ec2')
ssm = boto3.client('ssm')
autoscaling = boto3.client('autoscaling')

def lambda_handler(event, context):
    # Fetch the latest AMI ID from SSM Parameter Store
    try:
        print("Fetching latest AMI ID from Parameter Store...")
        parameter_name = "/ami/linux/test"  # Update this if needed
        response = ssm.get_parameter(Name=parameter_name)
        ami_id = response['Parameter']['Value']
        print(f"Retrieved AMI ID: {ami_id}")
    except Exception as e:
        print(f"Failed to fetch AMI from Parameter Store: {e}")
        return

    # Fetch excluded instances and ASGs from environment variables
    static_excluded_instances = os.environ.get("EXCLUDED_INSTANCES", "").split(",")
    excluded_asgs = os.environ.get("EXCLUDED_ASGS", "").split(",")
    asg_configurations = json.loads(os.environ.get("ASG_CONFIGURATIONS", "{}"))

    # Update Auto Scaling Groups (ASGs)
    try:
        print("Starting Auto Scaling Group updates...")
        asgs = autoscaling.describe_auto_scaling_groups()
        for asg in asgs['AutoScalingGroups']:
            asg_name = asg['AutoScalingGroupName']

            # Skip excluded ASGs
            if asg_name in excluded_asgs:
                print(f"Skipping ASG: {asg_name}")
                continue

            # Apply ASG configurations if defined
            if asg_name in asg_configurations:
                config = asg_configurations[asg_name]
                print(f"Updating ASG: {asg_name} with AMI: {ami_id}")
                autoscaling.update_auto_scaling_group(
                    AutoScalingGroupName=asg_name,
                    MinSize=config['min'],
                    MaxSize=config['max'],
                    DesiredCapacity=config['desired']
                )

            # Update Launch Template for ASG with new AMI
            if 'LaunchTemplate' in asg:
                launch_template_id = asg['LaunchTemplate']['LaunchTemplateId']
                current_version = asg['LaunchTemplate']['Version']

                print(f"Updating Launch Template for ASG: {asg_name}")
                response = ec2.create_launch_template_version(
                    LaunchTemplateId=launch_template_id,
                    SourceVersion=current_version,
                    LaunchTemplateData={
                        'ImageId': ami_id
                    }
                )
                new_version = response['LaunchTemplateVersion']['VersionNumber']
                print(f"Updated Launch Template version to: {new_version}")

                # Point ASG to the new launch template version
                autoscaling.update_auto_scaling_group(
                    AutoScalingGroupName=asg_name,
                    LaunchTemplate={
                        'LaunchTemplateId': launch_template_id,
                        'Version': str(new_version)
                    }
                )

        print("ASG updates completed successfully.")
    except Exception as e:
        print(f"Failed to update ASGs: {e}")

    # Update standalone EC2 instances
    try:
        print("Updating standalone EC2 instances...")
        standalone_instances = []
        instances = ec2.describe_instances()
        for reservation in instances['Reservations']:
            for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                state = instance['State']['Name']

                # Skip excluded instances and non-running instances
                if instance_id in static_excluded_instances or state != "running":
                    print(f"Excluding instance {instance_id} (state: {state})")
                    continue

                # Check if the instance is part of an ASG
                tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
                if 'aws:autoscaling:groupName' in tags:
                    print(f"Skipping ASG-managed instance: {instance_id} (ASG: {tags['aws:autoscaling:groupName']})")
                    continue

                # Add to the list of standalone instances to update
                standalone_instances.append(instance_id)

        print(f"Standalone instances to update: {standalone_instances}")

        # Perform updates on standalone instances
        for instance_id in standalone_instances:
            print(f"Updating standalone instance: {instance_id} with AMI: {ami_id}")
            ec2.terminate_instances(InstanceIds=[instance_id])
            ec2.run_instances(
                ImageId=ami_id,
                MinCount=1,
                MaxCount=1,
                InstanceType="t2.micro",  # Replace with dynamic instance type if needed
                SubnetId=instance['SubnetId'],  # Retain network configuration
                SecurityGroupIds=[sg['GroupId'] for sg in instance['SecurityGroups']]
            )

        print("Standalone instance refresh completed successfully.")
    except Exception as e:
        print(f"Failed to update standalone EC2 instances: {e}")

    return {
        "statusCode": 200,
        "body": "AMI update process completed successfully."
    }
