import boto3
import requests
import os
import json

# AWS Clients
ec2_client = boto3.client("ec2")
ssm_client = boto3.client("ssm")
secrets_client = boto3.client("secretsmanager")
sts_client = boto3.client("sts")  # To fetch current AWS Account ID

# Retrieve Terraform API Token from AWS Secrets Manager
def get_tfc_api_token():
    secret_name = "TFC_API_TOKEN"
    try:
        response = secrets_client.get_secret_value(SecretId=secret_name)
        secret_value = response["SecretString"] if "SecretString" in response else None
        print(f"üîπ Retrieved Secret: {'Yes' if secret_value else 'No'}")
        return secret_value.strip() if secret_value else None
    except Exception as e:
        print(f"‚ùå Error retrieving secret: {e}")
        return None

# Get latest AMI from SSM Parameter Store
def get_latest_ami():
    try:
        response = ssm_client.get_parameter(Name=os.environ["AMI_PARAMETER_NAME"])
        return response["Parameter"]["Value"]
    except Exception as e:
        print(f"‚ùå Error fetching AMI from SSM: {e}")
        return None

# Get AWS Account ID
def get_current_aws_account():
    try:
        response = sts_client.get_caller_identity()
        return response["Account"]
    except Exception as e:
        print(f"‚ùå Error fetching AWS Account ID: {e}")
        return None

# Get EC2 instances running OLD AMI and extract workspace_id
def get_workspace_ids(old_ami):
    workspace_ids = set()
    try:
        instances = ec2_client.describe_instances(
            Filters=[{"Name": "image-id", "Values": [old_ami]}]
        )

        for reservation in instances["Reservations"]:
            for instance in reservation["Instances"]:
                tfc_wsid = None
                for tag in instance.get("Tags", []):
                    if tag["Key"] == "tfc_wsid":  
                        tfc_wsid = tag["Value"]
                        break  

                if tfc_wsid:
                    print(f"‚úÖ Found EC2 with tfc_wsid: {tfc_wsid}")
                    workspace_ids.add(tfc_wsid)
                else:
                    print(f"‚ö†Ô∏è Skipping EC2 (Instance ID: {instance['InstanceId']}): No workspace ID tag found.")

    except Exception as e:
        print(f"‚ùå Error fetching EC2 instances: {e}")

    print(f"üîπ Total Workspace IDs Found: {workspace_ids}")
    return list(workspace_ids)

# Get list of workspaces from Terraform Cloud
def get_tf_workspaces(api_token, org_name):
    headers = {
        "Authorization": f"Bearer {api_token}",
        "Content-Type": "application/vnd.api+json",
    }
    
    workspaces = []
    url = f"https://app.terraform.io/api/v2/organizations/{org_name}/workspaces"

    while url:
        response = requests.get(url, headers=headers)
        print(f"üîπ API Response Code: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå Error fetching workspaces: {response.text}")
            break

        data = response.json()
        workspaces.extend(data.get("data", []))
        
        # Check for pagination
        url = data.get("links", {}).get("next")

    print(f"üîπ Total Workspaces Retrieved: {len(workspaces)}")
    return workspaces

# Find matching Terraform workspaces
def find_matching_workspaces(api_token, org_name, workspace_ids, aws_account_id):
    workspaces = get_tf_workspaces(api_token, org_name)
    matched_workspaces = []

    print(f"üîπ Expected AWS Account ID: {aws_account_id}")
    print(f"üîπ Checking {len(workspaces)} workspaces from Terraform API...")

    for ws in workspaces:
        workspace_id = ws["id"]
        workspace_name = ws["attributes"]["name"]
        
        # Debugging: Print full workspace details
        print(f"üîç DEBUG: Checking Workspace: {workspace_id} (Name: {workspace_name})")
        print(f"üîç Full Attributes: {ws['attributes']}")

        # Extract AWS account ID from Terraform API response
        workspace_account = ws["attributes"].get("account-id", "UNKNOWN")

        # If account-id is missing, check workspace tags
        if workspace_account == "UNKNOWN":
            workspace_tags = ws["attributes"].get("tags", {})
            workspace_account = workspace_tags.get("account", "UNKNOWN")
        
        print(f"üîç Extracted AWS Account ID: {workspace_account}")

        # Security Check: Only match if AWS account ID matches
        if workspace_id in workspace_ids:
            if workspace_account == aws_account_id:
                print(f"‚úÖ Matched Workspace: {workspace_id} (Account: {workspace_account})")
                matched_workspaces.append(workspace_id)
            else:
                print(f"‚ùå Security Check Failed: {workspace_id} belongs to {workspace_account}, expected {aws_account_id}. Skipping.")

    print(f"üîπ Matched Workspaces (Valid): {matched_workspaces}")
    return matched_workspaces



# Trigger Terraform Cloud Run
def trigger_tf_run(api_token, workspace_id):
    headers = {
        "Authorization": f"Bearer {api_token}",
        "Content-Type": "application/vnd.api+json",
    }
    payload = {
        "data": {
            "attributes": {
                "message": "AMI update - Triggering ASG refresh",
                "is-destroy": False
            },
            "relationships": {
                "workspace": {
                    "data": {
                        "type": "workspaces",
                        "id": workspace_id
                    }
                }
            }
        }
    }
    
    try:
        response = requests.post(
            "https://app.terraform.io/api/v2/runs",
            headers=headers,
            json=payload,
        )
        print(f"‚úÖ Triggered Terraform Run for {workspace_id}: {response.status_code}")

    except Exception as e:
        print(f"‚ùå Error triggering Terraform Run for {workspace_id}: {e}")

# Lambda Handler Function
def lambda_handler(event, context):
    
    # Retrieve API token from Secrets Manager
    api_token = get_tfc_api_token()
    org_name = os.environ.get("TFC_ORG_NAME")  
    aws_account_id = get_current_aws_account()  # Fetch AWS Account ID

    # Debugging: Print Retrieved API Token, AWS Account, and Org Name
    print(f"üîπ API Token Retrieved: {'Yes' if api_token else 'No'}")
    print(f"üîπ Organization Name: {org_name}")
    print(f"üîπ AWS Account ID: {aws_account_id}")

    if not api_token:
        print("‚ùå Error: Failed to retrieve Terraform API token.")
        return {"statusCode": 500, "body": "Terraform API token retrieval failed"}

    if not org_name:
        print("‚ùå Error: Organization name is missing.")
        return {"statusCode": 500, "body": "Organization name retrieval failed"}

    if not aws_account_id:
        print("‚ùå Error: AWS Account ID retrieval failed.")
        return {"statusCode": 500, "body": "AWS Account ID retrieval failed"}

    # Get Old AMI from parameter store
    try:
        latest_ami = get_latest_ami()
        print(f"Latest AMI from SSM: {latest_ami}")

    except Exception as e:
        print(f"Error fetching AMI from SSM: {str(e)}")
        return {"statusCode": 500, "body": "Failed to fetch AMI from SSM"}

    # Find workspace IDs based on EC2 instances
    workspace_ids = get_workspace_ids(latest_ami)

    if not workspace_ids:
        print("‚ö†Ô∏è No matching EC2 instances found for the old AMI.")
        return {"statusCode": 200, "body": "No matching EC2 instances"}

    # Find matching Terraform Cloud Workspaces
    matching_workspaces = find_matching_workspaces(api_token, org_name, workspace_ids, aws_account_id)

    if not matching_workspaces:
        print("‚ö†Ô∏è No matching Terraform Cloud Workspaces found.")
        return {"statusCode": 200, "body": "No matching Terraform Cloud Workspaces"}

    # Trigger Terraform runs for each matching workspace
    for ws_id in matching_workspaces:
        trigger_tf_run(api_token, ws_id)

    return {"statusCode": 200, "body": "Terraform runs triggered successfully."}
