import boto3
import os
import time
import json

ec2 = boto3.client('ec2')
autoscaling = boto3.client('autoscaling')
ssm = boto3.client('ssm')

def lambda_handler(event, context):
    try:
        # Fetch AMI ID from SSM Parameter Store
        parameter_name = "/ami/linux/test"
        response = ssm.get_parameter(Name=parameter_name)
        ami_id = response['Parameter']['Value']
        print(f"Retrieved AMI ID: {ami_id}")
    except Exception as e:
        print(f"Failed to fetch AMI from Parameter Store: {e}")
        return

    # Fetch configurations from environment variables
    excluded_instances = os.environ.get("EXCLUDED_INSTANCES", "").split(",")
    excluded_asgs = os.environ.get("EXCLUDED_ASGS", "").split(",")
    asg_configurations = json.loads(os.environ.get("ASG_CONFIGURATIONS", "{}"))

    try:
        # Process Auto Scaling Groups (ASG)
        print("Processing ASGs...")
        asgs = autoscaling.describe_auto_scaling_groups()['AutoScalingGroups']
        for asg in asgs:
            asg_name = asg['AutoScalingGroupName']

            # Skip excluded ASGs
            if asg_name in excluded_asgs:
                print(f"Skipping ASG: {asg_name}")
                continue

            # Update ASG configurations if defined
            if asg_name in asg_configurations:
                config = asg_configurations[asg_name]
                print(f"Updating ASG {asg_name} with configurations: {config}")
                autoscaling.update_auto_scaling_group(
                    AutoScalingGroupName=asg_name,
                    MinSize=config['min'],
                    MaxSize=config['max'],
                    DesiredCapacity=config['desired']
                )

            # Capture volumes for instances in ASG
            volumes_to_reattach = {}
            for instance in asg['Instances']:
                instance_id = instance['InstanceId']
                print(f"Capturing volumes for instance {instance_id}...")
                volumes = ec2.describe_volumes(Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}])
                volumes_to_reattach[instance_id] = [
                    {'VolumeId': volume['VolumeId'], 'Device': attachment['Device']}
                    for volume in volumes['Volumes']
                    for attachment in volume['Attachments']
                ]

            # Refresh ASG instances
            print(f"Starting instance refresh for ASG: {asg_name}")
            autoscaling.start_instance_refresh(AutoScalingGroupName=asg_name)
            print(f"Waiting for new instances to be launched in ASG: {asg_name}")
            time.sleep(60)  # Allow time for refresh

            # Reattach captured volumes to new ASG instances
            refreshed_instances = ec2.describe_instances(Filters=[
                {'Name': 'tag:aws:autoscaling:groupName', 'Values': [asg_name]},
                {'Name': 'instance-state-name', 'Values': ['running']}
            ])
            for reservation in refreshed_instances['Reservations']:
                for instance in reservation['Instances']:
                    instance_id = instance['InstanceId']
                    print(f"Reattaching volumes for refreshed instance: {instance_id} in ASG {asg_name}...")
                    if instance_id in volumes_to_reattach:
                        for volume in volumes_to_reattach[instance_id]:
                            volume_id = volume['VolumeId']
                            device_name = volume['Device']

                            # Highlighted: Check volume state before reattaching
                            volume_details = ec2.describe_volumes(VolumeIds=[volume_id])
                            attachment_state = volume_details['Volumes'][0]['Attachments'][0]['State'] if volume_details['Volumes'][0]['Attachments'] else "detached"

                            if attachment_state == "attached":
                                print(f"Skipping reattachment of volume {volume_id} as it is already attached.")
                                continue

                            try:
                                print(f"Reattaching volume {volume_id} to instance {instance_id} on device {device_name}...")
                                ec2.attach_volume(
                                    VolumeId=volume_id,
                                    InstanceId=instance_id,
                                    Device=device_name
                                )
                            except Exception as e:
                                print(f"Failed to reattach volume {volume_id} to instance {instance_id}: {e}")
        print("ASG updates, refresh, and volume reattachments completed successfully.")
    except Exception as e:
        print(f"Error updating ASGs: {e}")

    try:
        # Process standalone EC2 instances
        print("Updating standalone EC2 instances...")
        standalone_instances = []
        instances = ec2.describe_instances()
        for reservation in instances.get('Reservations', []):
            for instance in reservation.get('Instances', []):
                instance_id = instance.get('InstanceId')
                state = instance.get('State', {}).get('Name')

                # Skip excluded or non-running instances
                if instance_id in excluded_instances or state != "running":
                    print(f"Excluding instance {instance_id} (state: {state})")
                    continue

                # Check if the instance is part of an ASG
                tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
                if 'aws:autoscaling:groupName' in tags:
                    print(f"Skipping ASG-managed instance: {instance_id} (ASG: {tags['aws:autoscaling:groupName']})")
                    continue

                # Add standalone instance to the list
                standalone_instances.append(instance)

        print(f"Standalone instances to update: {standalone_instances}")

        # Perform updates on standalone instances
        for instance in standalone_instances:
            instance_id = instance.get('InstanceId')
            subnet_id = instance.get('SubnetId')
            instance_type = instance.get('InstanceType')
            security_groups = [sg['GroupId'] for sg in instance.get('SecurityGroups', [])]

            # Capture and terminate standalone instance volumes
            volumes = ec2.describe_volumes(Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}])
            for volume in volumes['Volumes']:
                volume_id = volume['VolumeId']
                device_name = volume['Attachments'][0]['Device']
                print(f"Capturing volume {volume_id} (Device: {device_name}) for instance {instance_id}")

            # Terminate instance
            print(f"Terminating standalone instance: {instance_id}")
            ec2.terminate_instances(InstanceIds=[instance_id])

            # Recreate instance and reattach volumes
            print(f"Recreating standalone instance: {instance_id} with AMI: {ami_id}")
            new_instance = ec2.run_instances(
                ImageId=ami_id,
                MinCount=1,
                MaxCount=1,
                InstanceType=instance_type,
                SubnetId=subnet_id,
                SecurityGroupIds=security_groups
            )['Instances'][0]
            new_instance_id = new_instance['InstanceId']

            print(f"Reattaching captured volumes to new instance: {new_instance_id}")
            for volume in volumes['Volumes']:
                volume_id = volume['VolumeId']
                device_name = volume['Attachments'][0]['Device']

                # Highlighted: Check volume state before reattaching
                volume_details = ec2.describe_volumes(VolumeIds=[volume_id])
                attachment_state = volume_details['Volumes'][0]['Attachments'][0]['State'] if volume_details['Volumes'][0]['Attachments'] else "detached"

                if attachment_state == "attached":
                    print(f"Skipping reattachment of volume {volume_id} as it is already attached.")
                    continue

                try:
                    ec2.attach_volume(
                        VolumeId=volume_id,
                        InstanceId=new_instance_id,
                        Device=device_name
                    )
                except Exception as e:
                    print(f"Failed to reattach volume {volume_id} to instance {new_instance_id}: {e}")

        print("Standalone instance refresh completed successfully.")
    except Exception as e:
        print(f"Failed to update standalone EC2 instances: {e}")
