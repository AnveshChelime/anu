# Capture volumes for instances in ASG
volumes_to_reattach = {}
for instance in asg['Instances']:
    instance_id = instance['InstanceId']
    print(f"Capturing volumes for instance {instance_id}...")
    volumes = ec2.describe_volumes(Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}])
    volumes_to_reattach[instance_id] = [
        {'VolumeId': volume['VolumeId'], 'Device': attachment['Device']}
        for volume in volumes['Volumes']
        for attachment in volume['Attachments']
        if attachment['Device'] != '/dev/xvda'  # Exclude root volume
    ]
    print(f"Captured volumes for instance {instance_id}: {volumes_to_reattach[instance_id]}")

# Start instance refresh for ASG
print(f"Starting instance refresh for ASG: {asg_name}")
autoscaling.start_instance_refresh(AutoScalingGroupName=asg_name)
print(f"Waiting for new instances to be launched in ASG: {asg_name}")
time.sleep(500)  # Adjust as needed

# Fetch refreshed instances
refreshed_instances = ec2.describe_instances(Filters=[
    {'Name': 'tag:aws:autoscaling:groupName', 'Values': [asg_name]},
    {'Name': 'instance-state-name', 'Values': ['running']}
])
refreshed_instance_ids = [
    instance['InstanceId']
    for reservation in refreshed_instances['Reservations']
    for instance in reservation['Instances']
]
print(f"Refreshed instance IDs for ASG {asg_name}: {refreshed_instance_ids}")

# Ensure mapping of old instances to new instances
if len(volumes_to_reattach) != len(refreshed_instance_ids):
    print(f"Mismatch in number of old instances ({len(volumes_to_reattach)}) and refreshed instances ({len(refreshed_instance_ids)})")
    return

old_to_new_mapping = dict(zip(volumes_to_reattach.keys(), refreshed_instance_ids))
print(f"Mapping of old to new instances: {old_to_new_mapping}")

# Reattach volumes to the correct instances
for old_instance_id, new_instance_id in old_to_new_mapping.items():
    print(f"Reattaching volumes from old instance {old_instance_id} to new instance {new_instance_id}...")
    for volume in volumes_to_reattach[old_instance_id]:
        volume_id = volume['VolumeId']
        device_name = volume['Device']

        # Check volume state before reattaching
        volume_details = ec2.describe_volumes(VolumeIds=[volume_id])
        attachment_state = (
            volume_details["Volumes"][0]["Attachments"][0]["State"]
            if volume_details["Volumes"][0]["Attachments"]
            else "detached"
        )

        if attachment_state == "attached":
            print(f"Skipping reattachment of volume {volume_id} as it is already attached.")
            continue

        try:
            print(f"Reattaching volume {volume_id} to instance {new_instance_id} on device {device_name}...")
            ec2.attach_volume(
                VolumeId=volume_id,
                InstanceId=new_instance_id,
                Device=device_name
            )
        except Exception as e:
            print(f"Failed to reattach volume {volume_id} to instance {new_instance_id}: {e}")
