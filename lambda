import boto3
import json
import os
import time

ec2 = boto3.client('ec2')
autoscaling = boto3.client('autoscaling')
ssm = boto3.client('ssm')

def lambda_handler(event, context):
    try:
        # Fetch AMI ID from SSM Parameter Store
        parameter_name = "/ami/linux/test"
        response = ssm.get_parameter(Name=parameter_name)
        ami_id = response['Parameter']['Value']
        print(f"Retrieved AMI ID: {ami_id}")
    except Exception as e:
        print(f"Failed to fetch AMI from Parameter Store: {e}")
        return

    # Fetch configurations from environment variables
    excluded_instances = os.environ.get("EXCLUDED_INSTANCES", "").split(",")
    excluded_asgs = os.environ.get("EXCLUDED_ASGS", "").split(",")
    asg_configurations = json.loads(os.environ.get("ASG_CONFIGURATIONS", "{}"))

    try:
        # Update ASGs
        asgs = autoscaling.describe_auto_scaling_groups()
        for asg in asgs['AutoScalingGroups']:
            asg_name = asg['AutoScalingGroupName']

            # Skip excluded ASGs
            if asg_name in excluded_asgs:
                print(f"Skipping ASG: {asg_name}")
                continue

            # Apply ASG configurations if defined
            if asg_name in asg_configurations:
                config = asg_configurations[asg_name]
                print(f"Updating ASG {asg_name} with configurations: {config}")
                autoscaling.update_auto_scaling_group(
                    AutoScalingGroupName=asg_name,
                    MinSize=config['min'],
                    MaxSize=config['max'],
                    DesiredCapacity=config['desired']
                )

            # Check if the ASG uses a Launch Template
            if 'LaunchTemplate' in asg:
                launch_template_id = asg['LaunchTemplate']['LaunchTemplateId']
                current_version = asg['LaunchTemplate']['Version']
                print(f"ASG {asg_name} is using Launch Template: {launch_template_id}, Version: {current_version}")

                # Create a new Launch Template version with the new AMI
                response = ec2.create_launch_template_version(
                    LaunchTemplateId=launch_template_id,
                    SourceVersion=current_version,
                    LaunchTemplateData={
                        'ImageId': ami_id
                    }
                )
                new_version = response['LaunchTemplateVersion']['VersionNumber']
                print(f"Created new Launch Template Version: {new_version} for ASG: {asg_name}")

                # Update ASG to use the new Launch Template version
                autoscaling.update_auto_scaling_group(
                    AutoScalingGroupName=asg_name,
                    LaunchTemplate={
                        'LaunchTemplateId': launch_template_id,
                        'Version': str(new_version)
                    }
                )

            # Capture volumes before instance refresh
            captured_volumes = []
            for instance in asg['Instances']:
                instance_id = instance['InstanceId']
                volumes = ec2.describe_volumes(Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}])
                for volume in volumes['Volumes']:
                    for attachment in volume['Attachments']:
                        captured_volumes.append({
                            'VolumeId': volume['VolumeId'],
                            'Device': attachment['Device']
                        })

            print(f"Captured volumes for ASG {asg_name}: {captured_volumes}")

            # Start instance refresh for ASG
            print(f"Starting instance refresh for ASG: {asg_name}")
            autoscaling.start_instance_refresh(AutoScalingGroupName=asg_name)
            print(f"Waiting for new instances to be launched in ASG: {asg_name}")
            time.sleep(60)  # Adjust as necessary to allow new instances to come up

            # Reattach volumes to refreshed instances
            print(f"Reattaching volumes for refreshed instances in ASG {asg_name}...")
            for instance in asg['Instances']:
                instance_id = instance['InstanceId']
                for volume in captured_volumes:
                    volume_id = volume['VolumeId']
                    device_name = volume['Device']

                    # Check volume state before reattaching
                    volume_details = ec2.describe_volumes(VolumeIds=[volume_id])
                    attachment_state = volume_details['Volumes'][0]['Attachments'][0]['State'] if volume_details['Volumes'][0]['Attachments'] else "detached"

                    if attachment_state == "attached":
                        print(f"Skipping reattachment of volume {volume_id} as it is already attached.")
                        continue

                    try:
                        print(f"Reattaching volume {volume_id} to instance {instance_id} on device {device_name}...")
                        ec2.attach_volume(
                            VolumeId=volume_id,
                            InstanceId=instance_id,
                            Device=device_name
                        )
                    except Exception as e:
                        print(f"Failed to reattach volume {volume_id} to instance {instance_id}: {e}")
    except Exception as e:
        print(f"Error updating ASGs: {e}")

    # Update standalone EC2 instances
    try:
        print("Updating standalone EC2 instances...")
        standalone_instances = []
        instances = ec2.describe_instances()

        # Process reservations
        for reservation in instances.get('Reservations', []):
            for instance in reservation.get('Instances', []):
                instance_id = instance.get('InstanceId')
                state = instance.get('State', {}).get('Name')

                # Skip excluded or non-running instances
                if instance_id in excluded_instances or state != "running":
                    print(f"Excluding instance {instance_id} (state: {state})")
                    continue

                # Check if the instance is part of an ASG
                tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
                if 'aws:autoscaling:groupName' in tags:
                    print(f"Skipping ASG-managed instance: {instance_id} (ASG: {tags['aws:autoscaling:groupName']})")
                    continue

                # Add standalone instance to the list
                standalone_instances.append(instance)

        print(f"Standalone instances to update: {standalone_instances}")

 # Perform updates on standalone instances
for instance in standalone_instances:
    instance_id = instance.get('InstanceId')
    subnet_id = instance.get('SubnetId')
    instance_type = instance.get('InstanceType')
    security_groups = [sg['GroupId'] for sg in instance.get('SecurityGroups', [])]

    # Capture volumes
    volumes = ec2.describe_volumes(Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}])
    captured_volumes = [
        {'VolumeId': volume['VolumeId'], 'Device': attachment['Device']}
        for volume in volumes['Volumes']
        for attachment in volume['Attachments']
    ]
    print(f"Captured volumes for instance {instance_id}: {captured_volumes}")

    # Terminate the standalone instance
    print(f"Terminating standalone instance: {instance_id}")
    ec2.terminate_instances(InstanceIds=[instance_id])

    # Wait for the instance to terminate (adjust time.sleep or use a wait loop if needed)
    time.sleep(30)

    # Recreate the standalone instance
    print(f"Recreating standalone instance with AMI: {ami_id}")
    new_instance = ec2.run_instances(
        ImageId=ami_id,
        MinCount=1,
        MaxCount=1,
        InstanceType=instance_type,
        SubnetId=subnet_id,
        SecurityGroupIds=security_groups
    )
    new_instance_id = new_instance['Instances'][0]['InstanceId']
    print(f"New instance created: {new_instance_id}")

    # Wait for the new instance to enter running state
    print(f"Waiting for new instance {new_instance_id} to enter running state...")
    waiter = ec2.get_waiter('instance_running')
    waiter.wait(InstanceIds=[new_instance_id])

    # Reattach captured volumes
    for volume in captured_volumes:
        volume_id = volume['VolumeId']
        device_name = volume['Device']
        try:
            print(f"Reattaching volume {volume_id} to instance {new_instance_id} on device {device_name}...")
            ec2.attach_volume(
                VolumeId=volume_id,
                InstanceId=new_instance_id,
                Device=device_name
            )
        except Exception as e:
            print(f"Failed to reattach volume {volume_id} to instance {new_instance_id}: {e}")

print("Standalone instance refresh completed successfully.")
